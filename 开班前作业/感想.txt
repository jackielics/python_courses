1：第一题咋一看很简单，但我很久没做了，乍一看很懵逼，不知道怎么写
2：input我是真的没怎么用过，特地找了本书学习《Python编程：从入门到实践》
3:前三题都很基础
5：需要查一下三角形面积公式海伦公式，用到了math模块的sqrt功能，从前用过的还是有一点印象
6：用到了math.pi，很精确
8:循环实现，range了解要深一点，start end step
9:走了一点弯路，在print中用乘法可以实现。第一次知道print函数有个参数是end，默认\n，
这就是Python的函数式编程？for后面的参数有时候没用，可以用_替代掉,占位吧
10：越做越爽，比Leecode上面的C语言算法题简单多了。。
11:ASCII在Python里好像不适用？关于input函数又了解到了一些，比如.isdigit()，Python的一些函数真是方便。
同时也感觉越到后面题目越难。但也正常，总不可能把最难的放在最前面劝退你吧。。。
13：才知道闰年是怎么算的，1900不算闰年，2000就算
15:判断质数，只能暴力破解吗？至此1/5完成了
16:虽然都是判断质数，但是不单单判断一个，因此和15题的思路有了差异，差点还以为15题做错了
18:比较有趣味，打印输出九九乘法表
19:fibona数列，虽然答案是对的，但是不是很透彻，感觉脑子有点不够用
20:阿姆斯特朗数，以前中学学过的水仙数。用到了math.pow
21：要用到408里面的知识，乘基取余法，得再用思维导图了.Python里面的字符串拼接也很简单，直接+就行了。
用到了函数，毕竟这道题稍微有点点麻烦了，较为接近真实的算法题了
22:用了一个很土的方法，把ascii表写在了一个list里面
25:不要把问题搞复杂了，就先用int吧
26:打印日历，如果不用calender包的话，将非常麻烦，可是calender也不是Python的内置包。
27：用递归实现，需要了解递归函数的格式。距离上次写题已经很久了，这些天做了一些别的事情，也学了学Python的面向对象编程，
知识只有在实践中才能让你对它产生感性、直观的认识，以前一直没什么契机写很多行的面向对象编程代码，直到这次的chatGPT问世...
一时不知道怎么用recursion，甚至连recursion怎么写的都忘记了。
28:用 open.read()就可以了
29:判断两个字符串是否相等，不知道有没其他的坑
30:大小写，用到了一些内置函数，比如isupper()，upper()，显示出了Python相比C的先进之处，我在想JAVA是不是也这么方便
31:在网上找了一个判断闰年的逻辑，写过这么多次了还是记不住。。。
32：yesterday once more,比较复杂了，可能需要写一个class，也可以不需要但是要写个函数
33:增删查改，但没说明怎么增删查改，索性按最简单的来
34：需要对list和dict的性质有所了解
35:百度了一下datetime.datetime.now(),看了一下50题里剩下的十几题，都是针对list等的一些操作，似乎比较简单
36-38:36、37比较简单，38用到了reverse函数，这是之前没有用过的
42:使用xxx in LIST 可以简单判断数组中是否存在某个元素
43:python清空数组对于Python来说很容易，直接=[]就行了
44:拷贝数据，用copy()就行了
45:用到了List的count函数，很久没用过了，以前比赛的时候还经常用，太久没用了
46-47:计算list的元素和可以用sum，计算积却没有函数可以直接用
48-49：用min()和max()就行了
50:才知道del list[idx] 可以直接删除list里的某一个元素，并且让后面的元素自动向前移动
----------------------------------------------------------------------------------
51:找工作开始的25道题，看起来比较有挑战性一点了。这题用STR.find()就可以了
52:用len()就可以了
53：没有说是什么格式的URL，那就可以自由发挥了,用一种简单的格式吧，没必要搞的太复杂
54：用的是exec()，eval好像也可以，但很久没用过了
55:用到了 ''.join(list)来拼接数组，使其变成字符串
56:是不是题目出得有问题，为什么跟55题差不多
57:分别根据字典的key和value进行排序，好像没有现成的方法，难道要写个排序算法？要想办法把key和value绑定在一起
sorted可以对list或者iterator进行排序
58:网上搜了一下之后发现，用for i in 循环字典时，取出的是key，然后可以用这个key去取value。
如此来看的话list就是key为range()的特殊字典
59:用到了dict.get(),dict.pop(),dict.copy()。这里的处理是key和value完全一样的才算是共同键值对
60：并没有说明key相同时怎么处理，那就不考虑key相同的情况
61:用到了time.strptime()和time.mktime()，时间的格式竟然还分大小写,为什么年要写成%Y而月和日只需要写成%m、%d。到现在为止都还觉得，后面的25道题比前面的更简单
62:和32题很类似，一个是前一天，一个是前三天
63:和61是兄弟题
64:：链表？Python里面不是没有指针和链表吗？难道用数组模拟链表？写题写到这里，有些内置函数的函数体还是看不懂额。
后面几题的一些查找和排序，是基于Python链表的吗？应该也不是，毕竟有要用到index的比如快速排序。感觉VSCode的语法提示不是很智能，特别是在OOP中.
没想到函数中可以这么写 val:int=0 
65：感觉要把408的数据结构思维导图翻出来了，其他的几科比如操作系统、计算机组成原理、计算机网络，好像一般用不到？
查了一下数据结构思维导图，原理清楚了，怎么写出来？好像用C语言怎么写都还不会？那Python怎么写？
66：线性搜索，就是一个一个找
67：感觉逻辑很简单，但是写起来不是很简单for me。插入排序有简单的和改良的，我还是写简单的吧。还是并不简单，
当你觉得一件事情很复杂时，把它拆分成很多个小部分——Jackie Li(woziji)，我这不就拆分出了move(),findPos()，应该能较好地解决这个问题.
新老数组合并，用到了extend()函数，发现这个函数用起来没有那么友好。稳定性未经过测试。代码应该说写的很烂，因为逻辑很复杂，可能我明天就看不懂了...
不知道出了手写之外，有什么其他的方法能够在写算法时可视化你的思维过程的，在大脑中打草稿没有很高的天赋是做不了的。。
68：快排涉及递归，本身就比较抽象，学的不是很好，写起来有一定的畏惧。怠工了几天之后，我觉得我我还是先写简单一点的后面的题吧，这个目前还是有难度
69:选择排序就比快排简单太多了，用的方法比较土，可能性能不是很高，但是写起来方便啊
70:冒泡排序也很简单，发现一个规律就是，在编程里利用空间比利用时间更难？
71：归并排序，看了两天之后，又玩去了，再看就忘记原来的思路了。还不是很清楚在没有指针的情况下，Python怎样使用实参和形参（？）。
归并竟然也是通过递归实现的，何苦呢？写递归程序的人的脑子跟我们的真的是同一个吗？408里学过，递归程序也有非递归实现方式。。。